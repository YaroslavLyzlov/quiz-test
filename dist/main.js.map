{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/modules/error-pages/custom-error/custom-error.component.html","webpack:///./src/app/modules/error-pages/custom-error/custom-error.component.ts","webpack:///./src/app/modules/error-pages/error-pages-routing.module.ts","webpack:///./src/app/modules/error-pages/error-pages.module.ts","webpack:///./src/app/modules/error-pages/index.ts","webpack:///./src/app/modules/error-pages/not-found/not-found.component.html","webpack:///./src/app/modules/error-pages/not-found/not-found.component.ts","webpack:///./src/app/modules/quiz/index.ts","webpack:///./src/app/modules/quiz/models/answer.ts","webpack:///./src/app/modules/quiz/models/index.ts","webpack:///./src/app/modules/quiz/models/quiz-result.ts","webpack:///./src/app/modules/quiz/models/quiz-task.ts","webpack:///./src/app/modules/quiz/quiz-api/case/get-answer-list.case.ts","webpack:///./src/app/modules/quiz/quiz-api/case/get-current-task-id.case.ts","webpack:///./src/app/modules/quiz/quiz-api/case/get-task-list.case.ts","webpack:///./src/app/modules/quiz/quiz-api/case/index.ts","webpack:///./src/app/modules/quiz/quiz-api/case/save-answer.case.ts","webpack:///./src/app/modules/quiz/quiz-api/case/save-current-task-id.case.ts","webpack:///./src/app/modules/quiz/quiz-api/case/try-again-quiz.case.ts","webpack:///./src/app/modules/quiz/quiz-api/data/task-list.ts","webpack:///./src/app/modules/quiz/quiz-api/quiz-api.module.ts","webpack:///./src/app/modules/quiz/quiz-api/quiz-api.repository.ts","webpack:///./src/app/modules/quiz/quiz-main/quiz-main.component.css","webpack:///./src/app/modules/quiz/quiz-main/quiz-main.component.html","webpack:///./src/app/modules/quiz/quiz-main/quiz-main.component.ts","webpack:///./src/app/modules/quiz/quiz-question/quiz-question.component.html","webpack:///./src/app/modules/quiz/quiz-question/quiz-question.component.ts","webpack:///./src/app/modules/quiz/quiz-result/quiz-result.component.html","webpack:///./src/app/modules/quiz/quiz-result/quiz-result.component.ts","webpack:///./src/app/modules/quiz/quiz-routing.module.ts","webpack:///./src/app/modules/quiz/quiz.module.ts","webpack:///./src/app/modules/quiz/services/index.ts","webpack:///./src/app/modules/quiz/services/quiz-result.resolver.ts","webpack:///./src/app/modules/quiz/services/quiz-storage.service.ts","webpack:///./src/app/modules/quiz/services/quiz-task-list.resolver.ts","webpack:///./src/app/modules/shared/app-button/app-button.component.css","webpack:///./src/app/modules/shared/app-button/app-button.component.html","webpack:///./src/app/modules/shared/app-button/app-button.component.ts","webpack:///./src/app/modules/shared/carousel/carousel.ts","webpack:///./src/app/modules/shared/carousel/index.ts","webpack:///./src/app/modules/shared/index.ts","webpack:///./src/app/modules/shared/pipes/index.ts","webpack:///./src/app/modules/shared/pipes/seconds-to-time.pipe.ts","webpack:///./src/app/modules/shared/services/index.ts","webpack:///./src/app/modules/shared/services/localstorage/index.ts","webpack:///./src/app/modules/shared/services/localstorage/localstorage.service.ts","webpack:///./src/app/modules/shared/shared.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nconst appRoutes: Routes = [\n  { path: '', redirectTo: '/quiz/question', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(appRoutes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AppRoutingModule {}\n","module.exports = \"<router-outlet *ngIf=\\\"!showLoader\\\">\\n</router-outlet>\\n\\n<!--тут должен быть красивый лоадер, например :)-->\\n<h1 *ngIf=\\\"showLoader\\\">Загрузка...</h1>\\n\"","import { Component } from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  showLoader: boolean = false;\n  constructor(router: Router) {\n    router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.showLoader = true;\n      } else if (event instanceof NavigationEnd) {\n        this.showLoader = false;\n      }\n    });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { QuizModule } from './modules/quiz';\nimport { ErrorPagesModule } from './modules/error-pages';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    QuizModule,\n    ErrorPagesModule\n  ],\n  providers: [],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n","module.exports = \"<p>\\n  Здесь какая-то ошибка :)\\n</p>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-custom-error',\n  templateUrl: './custom-error.component.html'\n})\nexport class CustomErrorComponent {\n}\n","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { CustomErrorComponent } from './custom-error/custom-error.component';\n\nconst errorPagesRoutes: Routes = [\n  { path: '**',\n    component: NotFoundComponent\n  },\n  { path: 'custom-error',\n    component: CustomErrorComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(errorPagesRoutes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class ErrorPagesRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { CustomErrorComponent } from './custom-error/custom-error.component';\nimport { ErrorPagesRoutingModule } from './error-pages-routing.module';\n\n@NgModule({\n  imports: [ ErrorPagesRoutingModule ],\n  declarations: [ NotFoundComponent, CustomErrorComponent ]\n})\nexport class ErrorPagesModule {}\n","export { ErrorPagesModule } from './error-pages.module';\n","module.exports = \"<h1>404</h1>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n})\nexport class NotFoundComponent {}\n","export { QuizModule } from './quiz.module';\n","export class Answer {\n  get text(): string {\n    return this._text;\n  }\n  get time(): number {\n    return this._time;\n  }\n  get isAnswered(): boolean {\n    return this._isAnswered;\n  }\n  private _timer: number;\n  /**\n   * @description Аналогично методу fromServer\n   */\n  static fromServer(model: any): Answer {\n    return new Answer(model.taskId, model.text, model.time, model.isAnswered);\n  }\n  constructor(public taskId: string,\n              private _text: string = '',\n              private _time: number = 0,\n              private _isAnswered: boolean = false) {}\n\n  startTimer(): void {\n    this._timer = window.setTimeout(\n      () => {\n        this._time++;\n        this.startTimer();\n      }, 1000);\n  }\n\n  stopTimer(): void {\n    clearInterval(this._timer);\n  }\n\n  /**\n   * @description Метод, чтобы присваивание было не явным и не менять модель извне\n   */\n  setAnswer(text: string): void {\n    this._text = text;\n  }\n\n  /**\n   * @description Здесь для таких вещей по-хорошему прикрутить какую-нибудь библиотеку\n   * У нас используется и нами написана https://github.com/SoEasy/tserialize\n   * В тестовом задании не стал прикручивать, чтобы время много не тратить\n   * Модель, которую отправляем на сервер, не стал указывать, лучше бы указать, конечно, но впринципе тут как кому удобнее\n   * и как команда договориться у себя\n   */\n  toServer(): any {\n    return {\n      text: this.text,\n      time: this.time,\n      isAnswered: this.isAnswered,\n      taskId: this.taskId\n    };\n  }\n}\n","export { Answer } from './answer';\nexport { QuizResult } from './quiz-result';\nexport { QuizTask } from './quiz-task';\n","import { QuizTask } from './quiz-task';\n\nexport class QuizResult {\n  constructor(public quizResultList: Array<QuizTask>,\n              public resultTime: number) {}\n}\n","import { Task } from './task';\nimport { Answer } from './answer';\n\nexport class QuizTask {\n  constructor(public task: Task,\n              public answer: Answer) {}\n}\n","import { Injectable } from '@angular/core';\nimport { QuizApiRepository } from '../quiz-api.repository';\nimport { Observable } from 'rxjs';\nimport { Answer } from '../../models';\n\n\n@Injectable()\nexport class GetAnswerListCase {\n\n  constructor(private repository: QuizApiRepository) {}\n\n  execute(): Observable<Array<Answer>> {\n    return this.repository.getAnswerList();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { QuizApiRepository } from '../quiz-api.repository';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class GetCurrentTaskIdCase {\n\n  constructor(private repository: QuizApiRepository) {}\n\n  execute(): Observable<string> {\n    return this.repository.getCurrentTaskId();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { QuizApiRepository } from '../quiz-api.repository';\nimport { Observable } from 'rxjs';\nimport { Task } from '../../models/task';\n\n@Injectable()\nexport class GetTaskListCase {\n\n  constructor(private repository: QuizApiRepository) {}\n\n  execute(): Observable<Array<Task>> {\n    return this.repository.getTaskList();\n  }\n}\n","export { GetAnswerListCase } from './get-answer-list.case';\nexport { GetCurrentTaskIdCase } from './get-current-task-id.case';\nexport { GetTaskListCase } from './get-task-list.case';\nexport { SaveAnswerCase } from './save-answer.case';\nexport { SaveCurrentTaskIdCase } from './save-current-task-id.case';\nexport { TryAgainQuizCase } from './try-again-quiz.case';\n","import { Injectable } from '@angular/core';\nimport { QuizApiRepository } from '../quiz-api.repository';\nimport { Observable } from 'rxjs';\nimport { Task } from '../../models/task';\nimport { Answer } from '../../models';\n\n/**\n * @description Case - слой преобразования данных из чистой модели\n * из хранилищя, в более подготовленные данные для бизнес логики\n * и именно с ним мы работаем в контроллере компонента,\n * служит для простых преобразований, например, в случае плохо\n * спроектированного API или работы с внешним API, на которое повлиять\n * не представляется возможным. Когда преобразование не требуется - отдаем, как есть.\n * НО, важное замечание, это один из примеров, как можно работать с сервером и данными, конечное\n * решение принимаю обычно в обсуждении с командой и проектом. В принципе подход\n * repository -> serivce (а не как здесь, repository -> case -> service) тоже имеет право на жизнь\n * @example Пример преобразования: ResponseModel { isConnectService1: boolean, isConnectService2 }\n *  И нам интересен только подключен ли он к 1-ому сервису, тогда мы вернем не Observable<ResponseModel>,\n *  а Observable<boolean>\n */\n@Injectable()\nexport class SaveAnswerCase {\n\n  constructor(private repository: QuizApiRepository) {}\n\n  execute(answer: Answer, isDirty: boolean = false): Observable<void> {\n    return this.repository.saveAnswer(answer, isDirty);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { QuizApiRepository } from '../quiz-api.repository';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class SaveCurrentTaskIdCase {\n\n  constructor(private repository: QuizApiRepository) {}\n\n  execute(taskId: string): Observable<void> {\n    return this.repository.saveCurrentTaskId(taskId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { QuizApiRepository } from '../quiz-api.repository';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TryAgainQuizCase {\n\n  constructor(private repository: QuizApiRepository) {}\n\n  execute(): Observable<void> {\n    return this.repository.tryAgainQuiz();\n  }\n}\n","import { Task } from '../../models/task';\n\nexport const taskList: Array<Task> = [\n  {\n    id: '1',\n    image: 'https://dummyimage.com/600x400/000/00ffd5.png',\n  },\n  {\n    id: '2',\n    image: 'https://dummyimage.com/600x400/000/ff00d5.png',\n  },\n  {\n    id: '3',\n    image: 'https://dummyimage.com/600x400/000/0f0fd5.png',\n  },\n];\n","import { NgModule } from '@angular/core';\nimport { QuizApiRepository } from './quiz-api.repository';\nimport { GetAnswerListCase, GetCurrentTaskIdCase, GetTaskListCase, SaveAnswerCase, SaveCurrentTaskIdCase, TryAgainQuizCase } from './case';\n@NgModule({\n  providers: [\n    QuizApiRepository,\n    GetTaskListCase,\n    GetAnswerListCase,\n    SaveAnswerCase,\n    SaveCurrentTaskIdCase,\n    GetCurrentTaskIdCase,\n    TryAgainQuizCase\n  ]\n})\nexport class QuizApiModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { Task } from '../models/task';\nimport { taskList } from './data/task-list';\nimport { Answer } from '../models';\nimport { delay } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { LocalStorageService } from '../../shared/services/localstorage';\n\n/**\n * @description Данный класс - упрощенная модель класса работы с API\n * У нас в компании мы используем декораторы для удобной работы с данными сервера\n * по формату jsonrpc. Выглядит примерно так:\n * @JsonRpcPath(path, config)\n * class Repository {\n *  @JsonRpcRequest(methodName)\n *  getData(reqModel: ReqModel): Observable<ResponseModel>\n * }\n * Сущность Repository мы используем как низкоуровневый способ общения\n * с хранилищем (сервер, localStorage, indexedDb, etc...)\n * Он просто получает данные и отдает их дальше, без преобразований\n * Служит, чтобы легко можно было подменить источник данных и не менять верхние слои бизнес\n * логики. Repository создается не на весь проект один, их несколько на разные модули приложения\n * Но в нашем случае конкретно сейчас это отчасти и бэкэнд :)\n */\n\n\n\n@Injectable()\nexport class QuizApiRepository {\n  private answerList: Array<Answer> = [];\n  constructor(private localStorageService: LocalStorageService) {}\n\n  tryAgainQuiz(): Observable<void> {\n    this.answerList.length = 0;\n    this.localStorageService.clear();\n    return of(void 0).pipe(delay(1000));\n  }\n  /**\n   * @description Имитируем через rxjs асинхронное общение с сервисом\n   */\n  getTaskList(): Observable<Array<Task>> {\n    return of(taskList).pipe(delay(1000));\n  }\n\n  getAnswerList(): Observable<Array<Answer>> {\n    this.answerList = this.localStorageService.getItem('answerList', (value: Array<Answer>) => {\n      return (value || []);\n    });\n    // const answerList = db.answerList.map(answerItem => Answer.fromServer(answerItem));\n    return of(this.answerList.map(Answer.fromServer)).pipe(delay(1000));\n  }\n\n  saveCurrentTaskId(taskId: string): Observable<void> {\n    this.localStorageService.setItem('currentTaskId', taskId);\n    return of(void 0).pipe(delay(1000));\n  }\n\n  getCurrentTaskId(): Observable<string> {\n    /**\n     * @description Так как это все-таки логика бэка, тут, в случае если currentTaskId\n     * нет, должен возвращаться id первого из списка, не буду хардкодить и обработаю эту логику в компоненте\n     */\n    const currentTaskId = this.localStorageService.getItem<string>('currentTaskId', (value) => value && value.toString());\n    return of(currentTaskId).pipe(delay(1000));\n  }\n\n  /**\n   *\n   * @description По идее вся логика должна быть на бэкенде,\n   * но так как у нас его тут нет, делаем сами только по этой причине,\n   * а не чтобы усложнить :) Флаг isDirty нужен по той же причине\n   * Потому что ответили ли мы на вопрос - решает бэк и ставит флаг isAnswered\n   * Но в нашем случае мы сами себе бэк и чтобы isAnswered не ставить в бизнес логике\n   * фронта, делаем такой костылек (хотя все-равно он фактиески идет из бизнес логики, просто иллюзия, что нет :))\n   */\n  saveAnswer(answer: Answer, isDirty: boolean = false): Observable<void> {\n    if (!answer.text && !answer.time) {\n      /**\n       * тут по идеее вернем какую-то ошибку и в будущем обработаем\n       */\n      return throwError('Not valid task').pipe(delay(1000));\n    }\n    const savedAnswer = this.answerList.find(\n      answerItem => answerItem.taskId === answer.taskId\n    );\n\n    if (!savedAnswer) {\n      const answerToSave = Object.assign({}, answer, { isAnswered: !isDirty });\n      this.answerList.push(answerToSave);\n    } else {\n      Object.assign(savedAnswer, { text: answer.text, time: answer.time, isAnswered: !isDirty });\n    }\n\n    this.localStorageService.setItem('answerList', JSON.stringify(this.answerList));\n    return of(void 0).pipe(delay(1000));\n  }\n}\n","module.exports = \":host {\\n  display: flex;\\n  justify-content: space-around;\\n}\\n\"","module.exports = \"<div>\\n  <button [disabled]=\\\"taskPaginator.isDisabledPrevShow() || isRequest\\\" (click)=\\\"taskPaginator.prev()\\\" app-button>Предыдущий вопрос</button>\\n</div>\\n<div>\\n  <app-quiz-question\\n    *ngIf=\\\"taskPaginator.currentItem && !isRequest\\\"\\n    [quizTask]=\\\"taskPaginator.currentItem\\\"\\n    [quizTaskIndex]=\\\"taskPaginator.currentIndex\\\"\\n    [quizTaskListLength]=\\\"taskPaginator.list.length\\\"\\n    (onSendAnswer)=\\\"onSendAnswer($event)\\\">\\n  </app-quiz-question>\\n</div>\\n<div>\\n  <button [disabled]=\\\"taskPaginator.isDisabledNextShow() || isRequest\\\" (click)=\\\"taskPaginator.next()\\\" app-button>Следующий вопрос</button>\\n</div>\\n\"","import { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\nimport { Answer } from '../models';\nimport { QuizStorageService } from '../services/quiz-storage.service';\nimport { QuizTask } from '../models';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Carousel } from 'app/modules/shared/carousel';\nimport { finalize } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-quiz-main',\n  templateUrl: './quiz-main.component.html',\n  styleUrls: ['./quiz-main.component.css']\n})\nexport class QuizMainComponent implements OnInit, OnDestroy {\n  taskPaginator: Carousel<QuizTask> = null;\n  isRequest: boolean = false;\n  private currentTaskId: string = null;\n\n  private activatedRouteSub: Subscription;\n\n  constructor(private quizStorageService: QuizStorageService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.activatedRouteSub = this.activatedRoute.data.subscribe(\n      data => {\n        const quizState = data.quizState;\n        this.currentTaskId = quizState.currentTaskId || quizState.list[0].task.id;\n        const index = quizState.list.findIndex(\n          taskItem => taskItem.task.id === this.currentTaskId\n        );\n        this.taskPaginator =\n          new Carousel<QuizTask>(quizState.list, index, this.onAfterChangeItem.bind(this), this.onBeforeChangeItem.bind(this));\n      }\n    );\n  }\n\n  onBeforeChangeItem(item: QuizTask): void {\n    if (!item) {\n      return;\n    }\n    item.answer.stopTimer();\n  }\n\n  onAfterChangeItem(item: QuizTask): void {\n    if (!item) {\n      return;\n    }\n    this.currentTaskId = item.task.id;\n    this.quizStorageService.saveCurrentTaskId(this.currentTaskId);\n    item.answer.startTimer();\n  }\n\n  onSendAnswer(answer: Answer): void {\n    this.isRequest = true;\n    this.quizStorageService.saveAnswer(\n      answer.toServer()\n    ).pipe(finalize(() => {\n      this.isRequest = false;\n    }))\n      .subscribe(\n        () => {\n          this.onSaveAnswer(answer.taskId);\n        }\n      );\n  }\n\n  private onSaveAnswer(taskId: string): void {\n    const quizTaskIndex = this.taskPaginator.list.findIndex(\n      quizTaskItem => quizTaskItem.task.id === taskId\n    );\n    const removed = this.taskPaginator.removeByIndex(quizTaskIndex);\n    if (removed && this.taskPaginator.list.length === 0) {\n      this.router.navigate(['quiz', 'result']);\n    }\n  }\n\n  /**\n   * @description Перед тем, как перезагрузить вкладку, сохраняем состояние опросника\n   * Конечно, есть вариант, когда у пользователя пропал интернет или выключился компьютер,\n   * но здесь уже стоит решить при конкретной бизнес-задаче, важно ли для нас это\n   * или можно пренебречь этим\n   */\n  @HostListener('window:beforeunload')\n  onReloadPage(): void {\n    this.taskPaginator.list.forEach(\n      listItem => this.quizStorageService.saveAnswer(listItem.answer.toServer(), true)\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.activatedRouteSub.unsubscribe();\n  }\n}\n","module.exports = \"<form #quizQuestion=\\\"ngForm\\\"\\n      (ngSubmit)=\\\"sendAnswer(quizQuestion)\\\"\\n      novalidate>\\n  <h3> Потраченное время: {{ quizTask.answer.time | secondsToTime}} </h3>\\n  <h4> Задание {{ quizTaskIndex + 1 }} из {{ quizTaskListLength }} оставшихся</h4>\\n  <div class=\\\"quiz-question__text\\\">\\n    <img width=\\\"600\\\" height=\\\"400\\\" [src]=\\\"quizTask.task.image\\\" alt=\\\"task image\\\">\\n  </div>\\n\\n  <div class=\\\"quiz-question__answer\\\">\\n    <input app-input name=\\\"answer\\\" [(ngModel)]=\\\"answerText\\\" (ngModelChange)=\\\"onChangeAnswerText()\\\" required>\\n  </div>\\n\\n  <button\\n    [disabled]=\\\"!quizQuestion.form.valid\\\"\\n    appButton\\n    class=\\\"quiz-question__send-answer\\\">\\n    Отправить\\n  </button>\\n</form>\\n\"","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Answer, QuizTask } from '../models';\n\n@Component({\n  selector: 'app-quiz-question',\n  templateUrl: './quiz-question.component.html'\n})\nexport class QuizQuestionComponent implements OnChanges {\n  answerText: string = '';\n\n  @Input() quizTaskIndex: number;\n  @Input() quizTaskListLength: number;\n  @Input() quizTask: QuizTask;\n  @Output() onSendAnswer: EventEmitter<Answer> = new EventEmitter<Answer>();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes && changes.quizTask && changes.quizTask.currentValue) {\n        /**\n         * Чтобы не менять модель answer неявно по ссылке через ngModel,\n         * сохраняем ее у себя в компоненте и при ответе - сохраняем\n         */\n        this.answerText = changes.quizTask.currentValue.answer.text;\n      }\n  }\n\n  onChangeAnswerText(): void {\n    this.quizTask.answer.setAnswer(this.answerText);\n  }\n\n  sendAnswer(): void {\n    this.quizTask.answer.stopTimer();\n    this.onSendAnswer.emit(this.quizTask.answer);\n  }\n}\n","module.exports = \"<ul class=\\\"quiz-result-list\\\">\\n  <li *ngFor=\\\"let item of result.quizResultList; index as i\\\">\\n    {{ i + 1 }}\\n    <img width=\\\"300\\\" height=\\\"200\\\" [src]=\\\"item.task.image\\\" alt=\\\"quiz image\\\">\\n    <div>Ответ: {{ item.answer.text }}</div>\\n    <div>Затраченное время на вопрос {{ item.answer.time | secondsToTime }}</div>\\n  </li>\\n</ul>\\n<div>\\n  Общее затраченное время: {{ result.resultTime | secondsToTime }}\\n</div>\\n<button app-button (click)=\\\"tryAgainQuiz()\\\">Пройти заново</button>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { QuizResult } from '../models';\nimport { QuizStorageService } from '../services/quiz-storage.service';\n\n@Component({\n  selector: 'app-quiz-result',\n  templateUrl: './quiz-result.component.html'\n})\nexport class QuizResultComponent implements OnInit {\n  result: QuizResult;\n  constructor(private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private quizStorageService: QuizStorageService) {\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe(\n      data => {\n        this.result = data.quizResult;\n      }\n    );\n  }\n\n  tryAgainQuiz(): void {\n    this.quizStorageService.tryAgainQuiz().subscribe(\n      () => this.router.navigate(['quiz', 'question'])\n    );\n  }\n}\n","import { RouterModule, Routes } from '@angular/router';\nimport { QuizMainComponent } from './quiz-main/quiz-main.component';\nimport { NgModule } from '@angular/core';\nimport { QuizResultComponent } from './quiz-result/quiz-result.component';\nimport { QuizResultResolver, QuizTaskListResolver } from './services';\n\nconst quizRoutes: Routes = [\n  { path: 'quiz/question',\n    component: QuizMainComponent,\n    resolve: {\n      quizState: QuizTaskListResolver\n    }\n  },\n  { path: 'quiz/result',\n    component: QuizResultComponent,\n    resolve: {\n      quizResult: QuizResultResolver\n    }\n  }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(quizRoutes)\n  ],\n  exports: [\n    RouterModule\n  ],\n  providers: [ QuizTaskListResolver, QuizResultResolver ]\n})\nexport class QuizRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared';\nimport { QuizQuestionComponent } from './quiz-question/quiz-question.component';\nimport { QuizMainComponent } from './quiz-main/quiz-main.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { QuizApiModule } from './quiz-api/quiz-api.module';\nimport { QuizRoutingModule } from './quiz-routing.module';\nimport { QuizResultComponent } from './quiz-result/quiz-result.component';\nimport { QuizStorageService } from './services/quiz-storage.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    SharedModule,\n    QuizRoutingModule,\n    QuizApiModule\n  ],\n  declarations: [ QuizQuestionComponent, QuizMainComponent, QuizResultComponent ],\n  providers: [ QuizStorageService ]\n})\nexport class QuizModule { }\n","export { QuizResultResolver } from './quiz-result.resolver';\nexport { QuizTaskListResolver } from './quiz-task-list.resolver';\n","import { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { QuizStorageService } from './quiz-storage.service';\nimport { catchError, finalize } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class QuizResultResolver implements Resolve<any> {\n  constructor(private quizMainService: QuizStorageService,\n              private router: Router) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<any> {\n    return this.quizMainService.getQuizResult()\n      .pipe(catchError(\n      error => {\n        /**\n         * Не даем переходить в результат, если по какой-то причине\n         * не смогли получить результат (например, пользователь еще не прошел тест до конца)\n         * В данном случае не обрабатываю конкретные ошибки, просто перекидываю в quiz\n         * В случае более сложной обработки возможны варианты (перекидывать на страницу ошибки, например)\n         */\n        this.router.navigate(['quiz', 'question']);\n        return of(error);\n      }\n    ));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Task } from '../models/task';\nimport { Answer, QuizResult, QuizTask } from '../models';\nimport {\n  GetAnswerListCase, GetCurrentTaskIdCase, GetTaskListCase, SaveAnswerCase, SaveCurrentTaskIdCase,\n  TryAgainQuizCase\n} from '../quiz-api/case';\n\n\n\n@Injectable()\nexport class QuizStorageService {\n  constructor(private getTaskListCase: GetTaskListCase,\n              private getAnswerListCase: GetAnswerListCase,\n              private saveAnswerCase: SaveAnswerCase,\n              private getCurrentTaskIdCase: GetCurrentTaskIdCase,\n              private saveCurrentTaskIdCase: SaveCurrentTaskIdCase,\n              private tryAgainQuizCase: TryAgainQuizCase) {\n  }\n\n  tryAgainQuiz(): Observable<void> {\n    return this.tryAgainQuizCase.execute();\n  }\n\n  saveCurrentTaskId(taskId: string): Observable<void> {\n    return this.saveCurrentTaskIdCase.execute(taskId);\n  }\n\n  getTaskId(): Observable<string> {\n    return this.getCurrentTaskIdCase.execute();\n  }\n\n  saveAnswer(answer: Answer, isDirty: boolean = false): Observable<void> {\n    return this.saveAnswerCase.execute(answer, isDirty);\n  }\n\n  getQuizTaskList(): Observable<Array<QuizTask>> {\n    return forkJoin<Array<Task>, Array<Answer>>([this.getTaskListCase.execute(), this.getAnswerListCase.execute()])\n      .pipe(map(data => this.handleTaskListWithAnswerList(data)));\n  }\n\n  getQuizResult(): Observable<QuizResult> {\n    return forkJoin<Array<Task>, Array<Answer>>([this.getTaskListCase.execute(), this.getAnswerListCase.execute()])\n      .pipe(map(data => this.handleQuizTaskResult(data)));\n  }\n\n  private handleQuizTaskResult(data: [Array<Task>, Array<Answer>]): QuizResult {\n    const taskList = data[0];\n    const answerList = data[1];\n    const answeredComplete = answerList && answerList.every(\n      answerItem => answerItem.isAnswered\n    );\n    if (taskList.length !== answerList.length || !answeredComplete) {\n      throw new Error('Not all questions with answers');\n    }\n    const quizTaskList = taskList.map(taskItem => {\n      const answer = answerList.find(\n        answerItem => taskItem.id === answerItem.taskId\n      );\n      return new QuizTask(taskItem, answer);\n    }).sort(\n      (a, b) => +a.task.id - +b.task.id\n    );\n\n    const resultTime = answerList.reduce((prev, curr) => {\n      prev += curr.time;\n      return prev;\n    }, 0);\n\n    return new QuizResult(\n      quizTaskList,\n      resultTime\n    );\n  }\n\n  /**\n   * @description Предполагая, что у нас база данных нормализована\n   * и хранит модель вопрос и ответов отдельно, приводим для нас в чуть более удобный вид\n   * по идее этим должен заниматься бэк для фронта\n   */\n  private handleTaskListWithAnswerList(data: [Array<Task>, Array<Answer>]): Array<QuizTask> {\n    const taskList = data[0];\n    const answerList = data[1];\n    const taskWithoutAnswer = taskList.filter(\n      task => {\n        return !answerList.some(answerItem => task.id === answerItem.taskId);\n      }\n    );\n\n    const answerResultList = data[1].filter(\n      answer => !answer.isAnswered\n    ).concat(\n      taskWithoutAnswer.map(\n        taskItem => new Answer(taskItem.id)\n      )\n    );\n    if (answerResultList.length === 0) {\n      throw new Error('All question is answered');\n    }\n    return answerResultList.map(\n      answer => {\n        const task = taskList.find(\n          taskItem => taskItem.id === answer.taskId\n        );\n        return new QuizTask(task, answer);\n      }\n    ).sort(\n      (a, b) => +a.task.id - +b.task.id\n    );\n  }\n}\n","import { QuizStorageService } from './quiz-storage.service';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\nimport { QuizTask } from '../models';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { map } from 'rxjs/operators';\n@Injectable()\nexport class QuizTaskListResolver implements Resolve<any> {\n  constructor(private quizMainService: QuizStorageService,\n              private router: Router) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<Array<QuizTask>> {\n\n    return forkJoin([this.quizMainService.getQuizTaskList(), this.quizMainService.getTaskId()])\n      .pipe(\n        map(data => {\n          return {\n            list: data[0],\n            currentTaskId: data[1]\n          };\n        }),\n        catchError(\n          error => {\n            console.error(error);\n            /**\n             * Ловим (ну, условно ловим :)) ошибку, что тест уже пройден, и надо показать результаты\n             */\n            this.router.navigate(['quiz', 'result']);\n            return of(error);\n          }\n        )\n      );\n  }\n}\n","module.exports = \":host {\\n  border: 1px solid black;\\n  border-radius: 5px;\\n  transition: all .2s;\\n  padding: 1em 2em;\\n  cursor: pointer;\\n  outline: none;\\n}\\n\\n:host:not([disabled]):hover {\\n  background-color: #f0f0f0;\\n}\\n\\n:host:not([disabled]):active {\\n  background-color: #ddd;\\n}\\n\\n:host[disabled] {\\n  opacity: .3;\\n  cursor: default;\\n}\\n\"","module.exports = \"<ng-content></ng-content>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'button[app-button]',\n  templateUrl: './app-button.component.html',\n  styleUrls: ['./app-button.component.css']\n})\nexport class AppButtonComponent {}\n","export class Carousel<T> {\n  currentItem: T = null;\n  constructor(public list: Array<T>,\n              public currentIndex: number = 0,\n              private onAfterChangeItem: (item: T) => void,\n              private onBeforeChangeItem: (item: T) => void) {\n    this.onBeforeChangeItem(null);\n    this.currentItem = list[currentIndex];\n    this.onAfterChangeItem(this.currentItem);\n  }\n\n  next(): void {\n    this.onBeforeChangeItem(this.currentItem);\n    this.currentItem = this.list[++this.currentIndex];\n    this.onAfterChangeItem(this.currentItem);\n  }\n\n  prev(): void {\n    this.onBeforeChangeItem(this.currentItem);\n    this.currentItem = this.list[--this.currentIndex];\n    this.onAfterChangeItem(this.currentItem);\n  }\n\n  removeByIndex(index: number): boolean {\n    const removed = this.list.splice(index, 1).length > 0;\n    if (this.currentIndex === this.list.length) {\n      --this.currentIndex;\n    }\n    this.onBeforeChangeItem(this.currentItem);\n    this.currentItem = this.list[this.currentIndex];\n    this.onAfterChangeItem(this.currentItem);\n    return removed;\n  }\n\n  isDisabledNextShow(): boolean {\n    return this.currentIndex >= this.list.length - 1 || this.list.length <= 1;\n  }\n\n  isDisabledPrevShow(): boolean {\n    return this.currentIndex === 0 || this.list.length <= 1;\n  }\n}\n","export { Carousel } from './carousel';\n","export { SharedModule } from './shared.module';\nexport { Carousel } from './carousel';\n","export { SecondsToTimePipe } from './seconds-to-time.pipe';\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'secondsToTime'\n})\nexport class SecondsToTimePipe implements PipeTransform {\n  transform(value: number): string {\n    const hours   = Math.floor(value / 3600);\n    const minutes = Math.floor((value - (hours * 3600)) / 60);\n    const seconds = value - (hours * 3600) - (minutes * 60);\n\n    let result = '';\n    if (hours < 10) {\n      result += `0${hours}:`;\n    } else {\n      result += `${hours}:`;\n    }\n    if (minutes < 10) {\n      result += `0${minutes}:`;\n    } else {\n      result += `${minutes}:`;\n    }\n    if (seconds < 10) {\n      result += `0${seconds}`;\n    } else {\n      result += seconds;\n    }\n    return result;\n  }\n}\n","export { LocalStorageService } from './localstorage';\n","export { LocalStorageService } from './localstorage.service';\n","import { Injectable } from '@angular/core';\n\n/**\n * @description Накидал простенький сервис, так как адекватный побыстрому не нашел для последнего angular,\n * экспериментировать не стал и тут тоже не стал много писать и сделал по-простому\n */\n@Injectable()\nexport class LocalStorageService {\n  prefix: string = 'quiz_app:';\n  setItem(key: string, value: any): void {\n    localStorage.setItem(`${this.prefix}${key}`, value);\n  }\n\n  getItem<T>(key: string, mapper?: (value: any) => T): T {\n    let value = null;\n    try {\n      value = JSON.parse(localStorage.getItem(`${this.prefix}${key}`));\n    } catch (e) {\n      console.error('JSON parse error', e);\n    }\n    return mapper && mapper(value) || value;\n  }\n\n  clear(): void {\n    localStorage.clear();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AppButtonComponent } from './app-button/app-button.component';\nimport { SecondsToTimePipe } from './pipes';\nimport { LocalStorageService } from './services';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [ AppButtonComponent, SecondsToTimePipe ],\n  exports: [ AppButtonComponent, SecondsToTimePipe ],\n  providers: [ LocalStorageService ]\n})\nexport class SharedModule { }\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}